{
  "name": "Raspberrypi cluster",
  "tagline": "Heroku on Raspberry Pi Cluster",
  "body": "#Distributed computing using Raspberry PI\r\n\r\n###Mini Heroku on Raspberry PI cluster\r\n\r\nhttps://www.heroku.com/ is a leading application hosting platform. In our CMPE-273 Distributed Systems class, we developed a **Raspberry PI cluster** with **3 nodes (1 master, 2 workers)** and developed functionality similar to heroku.com. \r\n\r\nUser can provide git repository url in the system and system can **build and deploy python projects**. we have implemented support for golang too. (Only build part implemented.)\r\n\r\nWe took this opportunity to learn distributed system concepts from scratch. We developed our own queue called raspberry queue which is in-memory priority queue. It is the backbone of our application. \r\n\r\nThe system has following components:\r\n\r\n* queue\r\n* master node server\r\n* build worker\r\n* dyno (cluster) manager\r\n* deployment worker\r\n* system statistics (similar to heartbeat)\r\n* cluster registration script (one time activity during a booted life)\r\n\r\nThis is our admin dashboard.\r\n![alt text](https://raw.githubusercontent.com/SJSU-CMPE273-Fall2015/raspberrypi_cluster/master/screenshots/admin_2.png \"Admin Dashboard\")\r\n\r\nUser can see his homepage as follows:\r\n![alt text](https://raw.githubusercontent.com/SJSU-CMPE273-Fall2015/raspberrypi_cluster/master/screenshots/build_succeed.png \"Admin Dashboard\")\r\n\r\nWe have uploaded **screenshots** in screenshots directory. (https://github.com/SJSU-CMPE273-Fall2015/raspberrypi_cluster/tree/master/screenshots)\r\n\r\n\r\n#####We used following configuration to set up our cluster:\r\n\r\n>*We have maintained config.txt in master node and config_user.txt in client node to configure nodes. However, at some places, IP addresses and locations are hard coded. We will try to move them into config file.* \r\n\r\n\r\nCluster information\r\n\r\n* master node - 192.168.137.4\r\n\r\n* cluster node 1 - 192.168.137.3\r\n\r\n* cluster node 2 - 192.168.137.2\r\n\r\nWebsite for user login and registration = https://192.168.137.4:8000\r\n\r\nLogin to Admin Dashboard = https://192.168.137.4:8000/admin\r\n\r\nbase path = /home/pi/raspberrypi_cluster\r\n\r\n#####Queue is started to save different tasks with priority , id \r\nStart the Raspberry queue -\r\n```\r\npath = /home/pi/raspberrypi_cluster/raspberryq\r\ncommand = ./startq.sh\r\n```\r\n\r\n\r\n#####start the master node server -\r\n```\r\npath = /home/pi/raspberrypi_cluster/master_node/\r\ncommand = python manage.py runserver 0.0.0.0:8000\r\n```\r\n\r\n#####Register cluster with server and send system statistics -\r\n```\r\npath = /home/pi/raspberrypi_cluster/clusternode/cluster\r\ncommand = ./startup.py\r\n```\r\n\r\n#####Check the Health of the cluster ---\r\n#####Start the dynomanager -\r\n```\r\npath = /home/pi/raspberrypi_cluster/master_node/dyno_manager/DynoManager.py\r\n```\r\n\r\n#####Cluster side configuration \r\nRegister the cluster to master and send system statistics such as CPU usage , network usage , disk Usage \r\n```\r\npath = /home/pi/raspberrypi_cluster/cluster_node/cluster\r\n./startup.sh\r\n```\r\n\r\n#####To Build and deploy an application onto the master Node and retrieve application to master node\r\n```\r\npath = /home/pi/raspberrypi_cluster/master_node/build_manager/BuildWorker.py\r\n```\r\n\r\nIf someone wants to use or extend the functionality, most welcome!\r\n\r\nLeave us a comment or suggestions or questions! We will be happy to see you! :) \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}